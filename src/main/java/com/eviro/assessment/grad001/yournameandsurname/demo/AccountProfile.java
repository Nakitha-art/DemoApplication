package com.eviro.assessment.grad001.yournameandsurname.demo;
//The code defines the AccountProfile class within the package com.eviro.assessment.grad001.yournameandsurname.demo

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

//import javax.persistence.Entity;
//import javax.persistence.GeneratedValue;
//import javax.persistence.GenerationType;
//import javax.persistence.Id;

@Entity //This annotation is provided by the Jakarta Persistence API (JPA) and marks the class as an entity,indicating
    // that instances of this class will be persisted in the database.
public class AccountProfile {
    @Id //This annotation indicates that the id field is the primary key of the entity.
    @GeneratedValue(strategy = GenerationType.IDENTITY) //This annotation specifies the generation strategy for the
    // primary key values. In this case, the GenerationType.IDENTITY strategy indicates that the primary key values are
    // automatically generated by the underlying database.

    private Long id; //This field represents the primary key of the AccountProfile entity.

    private String accountHolderName; //This field represents the account holder's name
    private String accountHolderSurname; //This field represents the account holder's surname.
    private String httpImageLink;// This field represents the HTTP image link associated with the account profile.
    //Constructors
    // The class provides two constructors: a default constructor (required by JPA) and a parameterized constructor that
    // initializes the fields of the AccountProfile clas
    public AccountProfile() { //Default constructor required by JPA
    }

    public AccountProfile(String accountHolderName, String accountHolderSurname, String httpImageLink) {
        this.accountHolderName = accountHolderName;
        this.accountHolderSurname = accountHolderSurname;
        this.httpImageLink= httpImageLink;
    }

    public Long getId() { //Getters and setters
        return id;
    } //Getters and Setters
    //The class provides getter and setter methods for each field, allowing access and modification of the corresponding
    // values

    public void setId(Long id) {
        this.id = id;
    }

    public String getAccountHolderName() {
        return accountHolderName;
    }

    public void setAccountHolderName(String accountHolderName) {
        this.accountHolderName = accountHolderName;
    }

    public String getAccountHolderSurname() {
        return accountHolderSurname;
    }

    public void setAccountHolderSurname(String accountHolderSurname) {
        this.accountHolderSurname = accountHolderSurname;
    }

    public String getHttpImageLink() {
        return httpImageLink;
    }

    public void setHttpImageLink(String httpImageLink) {
        this.httpImageLink = httpImageLink;
    }
}
//By using the @Entity annotation and defining the fields, constructors, and getter/setter methods, this class serves
// as the entity model for an AccountProfile. It can be used to represent and persist account profile data in a database
// using JPA

//JPA stands for Java Persistence API. It is a specification for object-relational mapping (ORM) in Java applications.
// JPA provides a set of interfaces and annotations that define a standard way to map Java objects to relational
// database tables.JPA allows developers to work with relational databases using object-oriented programming techniques.
// It abstracts away the details of the underlying database and provides a high-level API for performing database
// operations such as querying, inserting, updating, and deleting records.

